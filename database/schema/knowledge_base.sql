-- Create knowledge base categories table
CREATE TABLE public.kb_categories (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    description text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create knowledge base articles table
CREATE TABLE public.kb_articles (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title text NOT NULL,
    content text NOT NULL,
    category_id bigint REFERENCES public.kb_categories(id) ON DELETE SET NULL,
    author_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    published boolean DEFAULT false NOT NULL,
    views_count bigint DEFAULT 0 NOT NULL
);

-- Create knowledge base article tags table
CREATE TABLE public.kb_tags (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL UNIQUE,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create junction table for articles and tags
CREATE TABLE public.kb_article_tags (
    article_id bigint REFERENCES public.kb_articles(id) ON DELETE CASCADE,
    tag_id bigint REFERENCES public.kb_tags(id) ON DELETE CASCADE,
    PRIMARY KEY (article_id, tag_id)
);

-- Create table for article embeddings (for semantic search)
CREATE TABLE public.kb_article_embeddings (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    article_id bigint REFERENCES public.kb_articles(id) ON DELETE CASCADE,
    embedding vector(1536),
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create indexes
CREATE INDEX kb_articles_category_id_idx ON public.kb_articles(category_id);
CREATE INDEX kb_articles_author_id_idx ON public.kb_articles(author_id);
CREATE INDEX kb_articles_published_idx ON public.kb_articles(published);
CREATE INDEX kb_articles_updated_at_idx ON public.kb_articles(updated_at DESC);
CREATE INDEX kb_article_embeddings_article_id_idx ON public.kb_article_embeddings(article_id);

-- Enable RLS
ALTER TABLE public.kb_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.kb_articles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.kb_tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.kb_article_tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.kb_article_embeddings ENABLE ROW LEVEL SECURITY;

-- RLS Policies for categories
CREATE POLICY "Everyone can view categories"
    ON public.kb_categories
    FOR SELECT
    TO public
    USING (true);

CREATE POLICY "Only agents can manage categories"
    ON public.kb_categories
    USING (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid()
            AND auth.users.raw_user_meta_data->>'role' IN ('agent', 'admin')
        )
    );

-- RLS Policies for articles
CREATE POLICY "Everyone can view published articles"
    ON public.kb_articles
    FOR SELECT
    TO public
    USING (published = true);

CREATE POLICY "Agents can view all articles"
    ON public.kb_articles
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid()
            AND auth.users.raw_user_meta_data->>'role' IN ('agent', 'admin')
        )
    );

CREATE POLICY "Only agents can manage articles"
    ON public.kb_articles
    USING (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid()
            AND auth.users.raw_user_meta_data->>'role' IN ('agent', 'admin')
        )
    );

-- RLS Policies for tags
CREATE POLICY "Everyone can view tags"
    ON public.kb_tags
    FOR SELECT
    TO public
    USING (true);

CREATE POLICY "Only agents can manage tags"
    ON public.kb_tags
    USING (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid()
            AND auth.users.raw_user_meta_data->>'role' IN ('agent', 'admin')
        )
    );

-- RLS Policies for article tags
CREATE POLICY "Everyone can view article tags"
    ON public.kb_article_tags
    FOR SELECT
    TO public
    USING (true);

CREATE POLICY "Only agents can manage article tags"
    ON public.kb_article_tags
    USING (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid()
            AND auth.users.raw_user_meta_data->>'role' IN ('agent', 'admin')
        )
    );

-- RLS Policies for article embeddings
CREATE POLICY "Everyone can view article embeddings"
    ON public.kb_article_embeddings
    FOR SELECT
    TO public
    USING (true);

CREATE POLICY "Only agents can manage article embeddings"
    ON public.kb_article_embeddings
    USING (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid()
            AND auth.users.raw_user_meta_data->>'role' IN ('agent', 'admin')
        )
    );

-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER handle_kb_categories_updated_at
    BEFORE UPDATE ON public.kb_categories
    FOR EACH ROW
    EXECUTE PROCEDURE public.handle_updated_at();

CREATE TRIGGER handle_kb_articles_updated_at
    BEFORE UPDATE ON public.kb_articles
    FOR EACH ROW
    EXECUTE PROCEDURE public.handle_updated_at();

CREATE TRIGGER handle_kb_article_embeddings_updated_at
    BEFORE UPDATE ON public.kb_article_embeddings
    FOR EACH ROW
    EXECUTE PROCEDURE public.handle_updated_at(); 