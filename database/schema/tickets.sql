-- Create enum types for ticket status and priority
CREATE TYPE ticket_status AS ENUM ('open', 'pending', 'solved');
CREATE TYPE ticket_priority AS ENUM ('low', 'medium', 'high');

-- Create tickets table
CREATE TABLE public.tickets (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    subject text NOT NULL,
    description text NOT NULL,
    status ticket_status DEFAULT 'open'::ticket_status NOT NULL,
    priority ticket_priority DEFAULT 'medium'::ticket_priority NOT NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    assigned_to uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    group_id uuid REFERENCES public.groups(id) ON DELETE SET NULL
);

-- Create index for common queries
CREATE INDEX tickets_user_id_idx ON public.tickets(user_id);
CREATE INDEX tickets_assigned_to_idx ON public.tickets(assigned_to);
CREATE INDEX tickets_status_idx ON public.tickets(status);
CREATE INDEX tickets_updated_at_idx ON public.tickets(updated_at DESC);

-- Add RLS policies
ALTER TABLE public.tickets ENABLE ROW LEVEL SECURITY;

-- Users can view their own tickets
CREATE POLICY "Users can view own tickets"
    ON public.tickets
    FOR SELECT
    USING (auth.uid() = user_id);

-- Agents can view all tickets
CREATE POLICY "Agents can view all tickets"
    ON public.tickets
    FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid()
            AND auth.users.raw_user_meta_data->>'role' IN ('agent', 'admin')
        )
    );

-- Users can create tickets
CREATE POLICY "Users can create tickets"
    ON public.tickets
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

-- Agents can update tickets
CREATE POLICY "Agents can update tickets"
    ON public.tickets
    FOR UPDATE
    USING (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid()
            AND auth.users.raw_user_meta_data->>'role' IN ('agent', 'admin')
        )
    );

-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for updated_at
CREATE TRIGGER handle_tickets_updated_at
    BEFORE UPDATE ON public.tickets
    FOR EACH ROW
    EXECUTE PROCEDURE public.handle_updated_at(); 